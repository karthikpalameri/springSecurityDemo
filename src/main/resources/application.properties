spring.application.name=spring-sec-demo

# spring security related configuration
spring.security.user.name=user
spring.security.user.password=1111
# Strict will prevent sending JSESSIONID in cross-site requests. It is applicable only
# to SameSite=Strict cookies. It is applicable to all types of cookies, including
# session and persistent cookies.
# TDLR : allow same site requests
spring.servlet.session.same-site=strict


# PostgreSQL related config
# JDBC URL for PostgreSQL (replace with your actual database host, port, and DB name)
spring.datasource.url=jdbc:postgresql://localhost:5432/kkdb
# Username for PostgreSQL
spring.datasource.username=postgres
# Password for PostgreSQL
spring.datasource.password=password

# PostgreSQL driver class name
spring.datasource.driver-class-name=org.postgresql.Driver

#Hibernate related config
# Hibernate dialect to use for the target database (MySQL in this case)
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# Hibernate auto DDL generation (options: update, create, create-drop, none)
spring.jpa.hibernate.ddl-auto=update
# Show SQL queries in the console (useful for debugging)
spring.jpa.show-sql=true
# Format SQL queries for readability
spring.jpa.properties.hibernate.format_sql=true

# HikariCP related config
# Maximum time to wait for a connection from the pool (in milliseconds)
spring.datasource.hikari.connection-timeout=50000
# Maximum time that an idle connection can stay in the pool before being closed (in milliseconds)
spring.datasource.hikari.idle-timeout=300000
# Maximum lifetime of a connection in the pool (in milliseconds)
spring.datasource.hikari.max-lifetime=900000
# Maximum number of connections in the pool
spring.datasource.hikari.maximum-pool-size=10
# Minimum number of idle connections in the pool
spring.datasource.hikari.minimum-idle=2
# Custom pool name for better identification
spring.datasource.hikari.pool-name=ConnPool
# Connection test query (optional for ensuring connection validation)
# PostgreSQL-compatible query to test connections (PostgreSQL doesn't need DUAL)
spring.datasource.hikari.connection-test-query=SELECT 1
# MySQL-specific properties (commented out as they aren't necessary for PostgreSQL, but kept for reference)
# Enable prepared statement caching (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.cachePrepStmts=true
# Prepared statement cache size (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
# Prepared statement cache SQL limit (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
# Use server-side prepared statements (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
# Use local session state (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.useLocalSessionState=true
# Rewrite batched statements (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
# Cache result set metadata (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=true
# Cache server-side configuration (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.cacheServerConfiguration=true
# Elide setAutoCommit calls (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.elideSetAutoCommits=true
# Don't maintain time statistics for queries (MySQL-specific, not needed for PostgreSQL)
# spring.datasource.hikari.data-source-properties.maintainTimeStats=false

# Logging for HikariCP
# Set DEBUG level logging for HikariConfig (useful for debugging pool configuration)
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
# Set TRACE level logging for Hikari to log all pool-level interactions and events
logging.level.com.zaxxer.hikari=DEBUG
